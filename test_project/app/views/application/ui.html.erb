<html>
<head>

	<%= javascript_include_tag "d3.v3.min.js" %>
	<%= javascript_include_tag "jquery.min.js" %>
	<link rel="stylesheet" href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" />
	<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
	<script src="http://code.jquery.com/ui/1.10.2/jquery-ui.js"></script>
	<link rel="stylesheet" href="/resources/demos/style.css" />
	<style>
	.axis path,
	.axis line {
		fill: none;
		stroke: black;
		shape-rendering: crispEdges;
	}

	.axis text {
		font-family: sans-serif;
		font-size: 11px;
		}))
</style>
<script>


</script>
<style type="text/css">
div.inline { float:left; }
.clearBoth { clear:both; }
</style>
</head>
<body>

	<div class="inline" id="svg">

	</div>

	<div class="inline">
		<!-- Sliders  -->
		<h2>Select ranges for the data</h2>
		<p style="height:10px">
			<label for="mpgamount">Mpg range:</label>
			<input type="text" id="mpgamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		</p>
		<div id="mpgslider-range" style="width:500px"></div>

		<p style="height:10px">
			<label for="cylinderamount">Cylinder range:</label>
			<input type="text" id="cylinderamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		</p>
		<div id="cylinderslider-range" style="width:500px"></div>

		<p style="height:10px">
			<label for="horsepoweramount">Horsepower range:</label>
			<input type="text" id="horsepoweramount" style="border: 0; color: #f6931f; font-weight: bold;" />
		</p>
		<div id="horsepowerslider-range" style="width:500px"></div>

		<p style="height:10px">
			<label for="displacementamount">Displacement range:</label>
			<input type="text" id="displacementamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		</p>
		<div id="displacementslider-range" style="width:500px"></div>


		<p style="height:10px">
			<label for="weightamount">Weight range:</label>
			<input type="text" id="weightamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		</p>
		<div id="weightslider-range" style="width:500px"></div>

		<p style="height:10px">
			<label for="accelerationamount">Acceleration range:</label>
			<input type="text" id="accelerationamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		</p>
		<div id="accelerationslider-range" style="width:500px"></div>
		<br />
		<button onclick="update()">Update Visualisation</button>

		<br /><br /><br />
		<h2>Select attributes for axis</h2>
		<form>
			X
			<select id="xList" onchange="xDrop()">
				<option>mpg</option>
				<option>cylinder</option>  
				<option>horsepower</option>
				<option>displacement</option>
				<option>weight</option>
				<option>acceleration</option>
			</select>

		</form>

		<form>
			Y
			<select id="yList" onchange="yDrop()">
				<option>mpg</option>
				<option>cylinder</option>  
				<option>horsepower</option>
				<option>displacement</option>
				<option>weight</option>
				<option>acceleration</option>
			</select>

		</form>
	</div>
	
	<script type="text/javascript">



	var w = 1000;
	var h = 800;
	var textArea = 2000;
	var padding = 20;
	var count = 0;
	var counter = 0;
	var reset = false;
	var cars = [];

	var horsepower_min=46;
	var horsepower_max=230;
	var cylinder_min = 3;
	var cylinder_max = 8;
	var mpg_min = 9;
	var mpg_max = 46;
	var displacement_min = 68;
	var displacement_max = 455 ; 
	var acceleration_min = 8;
	var acceleration_max = 24;
	var weight_min = 1613;
	var weight_max = 5140;
	var svg;
	var xScale = d3.scale.linear()
	.domain([0, 1+(d3.max(cars, function(d) { return parseInt(d.mpg); }))])
	.range([20, w]);
	var yScale = d3.scale.linear()
	.domain([0, 1+(d3.max(cars, function(d) { return parseInt(d.mpg); }))])
	.range([h, 0]);
	var xLabel = "mpg";
	var yLabel = "mpg";
	var bottomText;
	var xAxis;
	var yAxis;
	var actualXAxis;
	var actualYAxis;

	function update()
	{
		d3.selectAll("circle").
		filter(function(d) {return (parseInt(d.cylinders) <= parseInt(cylinder_max) && parseInt(d.cylinders) >= parseInt(cylinder_min))&& (parseInt(d.horsepower) <= parseInt(horsepower_max) && parseInt(d.horsepower) >= parseInt(horsepower_min))&& (parseInt(d.mpg) <= parseInt(mpg_max) && parseInt(d.mpg) >= parseInt(mpg_min)) && (parseInt(d.displacement) <= parseInt(displacement_max) && parseInt(d.displacement) >= parseInt(displacement_min)) && (parseInt(d.weight) <= parseInt(weight_max) && parseInt(d.weight) >= parseInt(weight_min))&& (parseInt(d.acceleration) <= parseInt(acceleration_max) && parseInt(d.acceleration) >= parseInt(acceleration_min));})
		.transition()
		.duration(1000)
		.attr("opacity", 1);


		d3.selectAll("circle").filter(function(d) {
			return ((parseInt(d.cylinders) > parseInt(cylinder_max)) || (parseInt(d.cylinders) < parseInt(cylinder_min)))||((parseInt(d.horsepower) > parseInt(horsepower_max)) ||(parseInt(d.horsepower) < parseInt(horsepower_min)))||((parseInt(d.mpg) > parseInt(mpg_max)) ||(parseInt(d.mpg) < parseInt(mpg_min)))||((parseInt(d.displacement) > parseInt(displacement_max)) ||(parseInt(d.displacement) < parseInt(displacement_min)))||((parseInt(d.weight) > parseInt(weight_max)) ||(parseInt(d.weight) < parseInt(weight_min)))||((parseInt(d.acceleration) > parseInt(acceleration_max)) ||(parseInt(d.acceleration) < parseInt(acceleration_min)));})
		.transition()
		.duration(1000)
		.attr("opacity", 0);
	}

	function xDrop()
	{
		var xlist=document.getElementById("xList");
		xLabel = xlist.options[xlist.selectedIndex].text;
//Change the scales
xScale = d3.scale.linear()
.domain([0, 1+(d3.max(cars, function(d) {
	if (xLabel===("horsepower")){return parseInt(d.horsepower);}
	else if (xLabel===("cylinder")){return parseInt(d.cylinders);}
	else if (xLabel===("mpg")){return parseInt(d.mpg);}
	else if (xLabel===("displacement")){return parseInt(d.displacement);}
	else if (xLabel===("weight")){return parseInt(d.weight);}
	else if (xLabel===("acceleration")){return parseInt(d.acceleration);}
}))])
.range([20, w]);

//Change the circles
svg.selectAll("circle")
.transition()
.duration(1000)
.attr("cx", function(d,i) {
	if (xLabel===("horsepower")){return xScale(parseInt(d.horsepower));}
	else if (xLabel===("cylinder")){return xScale(parseInt(d.cylinders));}
	else if (xLabel===("mpg")){return xScale(parseInt(d.mpg));}
	else if (xLabel===("displacement")){return xScale(parseInt(d.displacement));}
	else if (xLabel===("weight")){return xScale(parseInt(d.weight));}
	else if (xLabel===("acceleration")){return xScale(parseInt(d.acceleration));}
})

xAxis = d3.svg.axis()
.scale(xScale)
.orient("bottom");
actualXAxis.call(xAxis);
xLabelText.text(xLabel);
}
function yDrop()
{
	var ylist=document.getElementById("yList");
	yLabel = ylist.options[ylist.selectedIndex].text;
	yScale = d3.scale.linear()
	.domain([0, 1+(d3.max(cars, function(d) {
		if (yLabel==("horsepower")){return parseInt(d.horsepower);}
		else if (yLabel==("cylinder")){return parseInt(d.cylinders);}
		else if (yLabel==("mpg")){return parseInt(d.mpg);}
		else if (yLabel==("displacement")){return parseInt(d.displacement);}
		else if (yLabel==("weight")){return parseInt(d.weight);}
		else if (yLabel==("acceleration")){return parseInt(d.acceleration);}

	}))])
	.range([h, 0]);
	svg.selectAll("circle")	
	.transition()
	.duration(1000)
	.attr("cy", function(d,i) {

		if (yLabel==("horsepower")){return yScale(parseInt(d.horsepower));}
		else if (yLabel==("cylinder")){return yScale(parseInt(d.cylinders));}
		else if (yLabel==("mpg")){return yScale(parseInt(d.mpg));}
		else if (yLabel==("displacement")){return yScale(parseInt(d.displacement));}
		else if (yLabel==("weight")){return yScale(parseInt(d.weight));}
		else if (yLabel==("acceleration")){return yScale(parseInt(d.acceleration));}
	})
	yAxis = d3.svg.axis()
	.scale(yScale)
	.orient("left");

   				 //Create Y axis
   				 actualYAxis.call(yAxis);
   				 yLabelText.text(yLabel);
   				}



   				d3.csv("auto_mpg.csv", function(csv){
   					csv.map(function(d){
				//	var new_person = new person(d.mpg,d.cylinders,d.displacement,d.horsepower,d.weight,d.weight,d.acceleration,d.model_year,d.origin,d.car_name,);
				cars.push(d);
			});

   					svg = d3.select("#svg").append("svg")
   					var text_column_padding = 0;
   					svg.attr("width", w + 100)
   					.attr("height", h+textArea);

   					xScale = d3.scale.pow().exponent(1.3)
   					.domain([0, 2+(d3.max(cars, function(d) { return parseInt(d.mpg); }))])
   					.range([20, w]);
   					yScale = d3.scale.linear()
   					.domain([0, 2+(d3.max(cars, function(d) { return parseInt(d.mpg); }))])
   					.range([h, 0]);

   					xAxis = d3.svg.axis()
   					.scale(xScale)
   					.orient("bottom");

   					yAxis = d3.svg.axis()
   					.scale(yScale)
   					.orient("left");

////////////////////////////////////////////////////////////
//Slider
///////////////////////////////////////////////////////////



$(function() {
	$( "#cylinderslider-range" ).slider({
		range: true,
		min: d3.min(cars, function(d) { return parseInt(d.cylinders); }),
		max: d3.max(cars, function(d) { return parseInt(d.cylinders); }),
		values: [ d3.min(cars, function(d) { return parseInt(d.cylinders); }), d3.max(cars, function(d) { return parseInt(d.cylinders); }) ],
		slide: function( event, ui ) {
			$( "#cylinderamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
			cylinder_min = parseInt(ui.values[0]);
			cylinder_max = parseInt(ui.values[1]);
		}
	});
	$( "#cylinderamount" ).val( "" + $( "#cylinderslider-range" ).slider( "values", 0 ) +
		" - " + $( "#cylinderslider-range" ).slider( "values", 1 ) );

	$( "#horsepowerslider-range" ).slider({
		range: true,
		min: d3.min(cars, function(d) { return parseInt(d.horsepower); }),
		max: d3.max(cars, function(d) { return parseInt(d.horsepower); }),
		values: [ d3.min(cars, function(d) { return parseInt(d.horsepower); }), d3.max(cars, function(d) { return parseInt(d.horsepower); }) ],
		slide: function( event, ui ) {
			$( "#horsepoweramount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
			horsepower_min = parseInt(ui.values[ 0 ]);
			horsepower_max = parseInt(ui.values[ 1 ]);
		}
	});
	$( "#horsepoweramount" ).val( "" + $( "#horsepowerslider-range" ).slider( "values", 0 ) +
		" - " + $( "#horsepowerslider-range" ).slider( "values", 1 ) );

	$( "#mpgslider-range" ).slider({
		range: true,
		min: d3.min(cars, function(d) { return parseInt(d.mpg); }),
		max: d3.max(cars, function(d) { return parseInt(d.mpg); }),
		values: [ d3.min(cars, function(d) { return parseInt(d.mpg); }), d3.max(cars, function(d) { return parseInt(d.mpg); }) ],
		slide: function( event, ui ) {
			$( "#mpgamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
			mpg_min = parseInt(ui.values[ 0 ]);
			mpg_max = parseInt(ui.values[ 1 ]);
		}
	});
	$( "#mpgamount" ).val( "" + $( "#mpgslider-range" ).slider( "values", 0 ) +
		" - " + $( "#mpgslider-range" ).slider( "values", 1 ) );

	$( "#displacementslider-range" ).slider({
		range: true,
		min: d3.min(cars, function(d) { return parseInt(d.displacement); }),
		max: d3.max(cars, function(d) { return parseInt(d.displacement); }),
		values: [ d3.min(cars, function(d) { return parseInt(d.displacement); }), d3.max(cars, function(d) { return parseInt(d.displacement); }) ],
		slide: function( event, ui ) {
			$( "#displacementamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
			displacement_min = parseInt(ui.values[ 0 ]);
			displacement_max = parseInt(ui.values[ 1 ]);
		}
	});
	$( "#displacementamount" ).val( "" + $( "#displacementslider-range" ).slider( "values", 0 ) +
		" - " + $( "#displacementslider-range" ).slider( "values", 1 ) );	

	$( "#weightslider-range" ).slider({
		range: true,
		min: d3.min(cars, function(d) { return parseInt(d.weight); }),
		max: d3.max(cars, function(d) { return parseInt(d.weight); }),
		values: [ d3.min(cars, function(d) { return parseInt(d.weight); }), d3.max(cars, function(d) { return parseInt(d.weight); }) ],
		slide: function( event, ui ) {
			$( "#weightamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
			weight_min = parseInt(ui.values[ 0 ]);
			weight_max = parseInt(ui.values[ 1 ]);
		}
	});
	$( "#weightamount" ).val( "" + $( "#weightslider-range" ).slider( "values", 0 ) +
		" - " + $( "#weightslider-range" ).slider( "values", 1 ) );	

	$( "#accelerationslider-range" ).slider({
		range: true,
		min: d3.min(cars, function(d) { return parseInt(d.acceleration); }),
		max: d3.max(cars, function(d) { return parseInt(d.acceleration); }),
		values: [ d3.min(cars, function(d) { return parseInt(d.acceleration); }), d3.max(cars, function(d) { return parseInt(d.acceleration); }) ],
		slide: function( event, ui ) {
			$( "#accelerationamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
			acceleration_min = parseInt(ui.values[ 0 ]);
			acceleration_max = parseInt(ui.values[ 1 ]);
		}
	});
	$( "#accelerationamount" ).val( "" + $( "#accelerationslider-range" ).slider( "values", 0 ) +
		" - " + $( "#accelerationslider-range" ).slider( "values", 1 ) );
});
/////////////////////////////////////////////////////////////
// Helpers
/////////////////////////////////////////////////////////////
d3.selection.prototype.moveToFront = function() {
	return this.each(function(){
		this.parentNode.appendChild(this);
	});
};
d3.selection.prototype.backupXY = function() {
	if (this.attr("y")>900){
		this[0][0].__data__.oldY = this.attr("y");
		this[0][0].__data__.oldX = this.attr("x");
	}
	return this
};
d3.selection.prototype.saveColor = function() {
	if (this.attr("x")>w){
		this[0][0].__data__.color = this.attr("color");
	}
	return this
};
//////////////////////////////////////
/////////////////////////////////////////////////////////////
// Circles
/////////////////////////////////////////////////////////////
var circles = svg.selectAll("circle")
.data(cars)
.enter()
.append("circle")
.attr("cx", function(d,i) {
	if (xLabel===("horsepower")){return xScale(parseInt(d.horsepower));}
	else if (xLabel===("cylinder")){return xScale(parseInt(d.cylinders));}
	else if (xLabel===("mpg")){return xScale(parseInt(d.mpg));}
	else if (xLabel===("displacement")){return xScale(parseInt(d.displacement));}
	else if (xLabel===("weight")){return xScale(parseInt(d.weight));}
	else if (xLabel===("acceleration")){return xScale(parseInt(d.acceleration));}
})
.attr("cy", function(d,i) {
	console.log(yLabel)
	if (yLabel==("horsepower")){return yScale(parseInt(d.horsepower));}
	else if (yLabel==("cylinder")){return yScale(parseInt(d.cylinders));}
	else if (yLabel==("mpg")){return yScale(parseInt(d.mpg));}
	else if (yLabel==("displacement")){return yScale(parseInt(d.displacement));}
	else if (yLabel==("weight")){return yScale(parseInt(d.weight));}
	else if (yLabel==("acceleration")){return yScale(parseInt(d.acceleration));}
})

.attr("r", function(d, i) {
	return parseFloat(d.mpg);
})
.attr("id", function(d, i) {
	return d.car_name.replace(/ /g, "_")+d.displacement+d.model_year;
})
.attr("fill", function(d,i) {
	var red = parseInt(255-d.mpg*6);
	var green = parseInt(d.mpg*6);
	var blue = 0;
	if (d.mpg<20){red+=parseInt(d.mpg*2);green-=parseInt(d.mpg*2)}
	return  "rgba(" + red + "," + green + "," + blue + "," +1.0 + ")"; 
})
.saveColor()
			//this.__data__
			.on("mouseover", function(){
				d3.select(this).style("fill", "red");
			})
			.on("mouseout", function(){
				d3.select(this).style("fill", d3.select(this).data.color)
			})
			.on("click", function(d, i){
				var selected = d3.select("text#"+this.__data__.car_name.replace(/ /g, "_")+this.__data__.displacement+this.__data__.model_year)
				.style("fill", "blue")
				.moveToFront()
				.backupXY()
				.transition()
				.attr("x", function(d,i) {
					if (xLabel===("horsepower")){return xScale(parseInt(d.horsepower));}
					else if (xLabel===("cylinder")){return xScale(parseInt(d.cylinders));}
					else if (xLabel===("mpg")){return xScale(parseInt(d.mpg));}
					else if (xLabel===("displacement")){return xScale(parseInt(d.displacement));}
					else if (xLabel===("weight")){return xScale(parseInt(d.weight));}
					else if (xLabel===("acceleration")){return xScale(parseInt(d.acceleration));}
				})
				.attr("y", function(d,i) {
					if (yLabel==("horsepower")){return yScale(parseInt(d.horsepower));}
					else if (yLabel==("cylinder")){return yScale(parseInt(d.cylinders));}
					else if (yLabel==("mpg")){return yScale(parseInt(d.mpg));}
					else if (yLabel==("displacement")){return yScale(parseInt(d.displacement));}
					else if (yLabel==("weight")){return yScale(parseInt(d.weight));}
					else if (yLabel==("acceleration")){return yScale(parseInt(d.acceleration));}
				})
			});



/////////////////////////////////////////////////////////////
// Text
/////////////////////////////////////////////////////////////

var text = svg.selectAll("text")
.data(cars)
.enter()
.append("text")
.sort(function(a,b){
	return d3.descending(b.car_name,a.car_name);
})
.text(function(d) {
	return '| '+d.car_name;
})

.attr("id", function(d, i) {
	return d.car_name.replace(/ /g, "_")+d.displacement+d.model_year;
})
.attr("x", function() {
	if (counter >80){
		counter=0;
		text_column_padding+=220;
	}
	counter += 1
	return text_column_padding;
})
.call(function(){counter = 0; count=0;})
.attr("y", function(d) {
	if (counter >80){
		count = 0;
		counter = 0;
	}	
	counter += 1
	return h+100+(count+=15);
})
.on("click", function(d, i){
	var selected = d3.select("circle#"+this.__data__.car_name.replace(/ /g, "_")+this.__data__.displacement+this.__data__.model_year)

	.transition()
	.style("fill", "red");
	var text = d3.select(this)
	.style("fill", "blue")
	
	.backupXY()
	.transition()
	.attr("x", function(d,i) {
		if (xLabel===("horsepower")){return xScale(parseInt(this.__data__.horsepower));}
		else if (xLabel===("cylinder")){return xScale(parseInt(this.__data__.cylinders));}
		else if (xLabel===("mpg")){return xScale(parseInt(this.__data__.mpg));}
		else if (xLabel===("displacement")){return xScale(parseInt(this.__data__.displacement));}
		else if (xLabel===("weight")){return xScale(parseInt(this.__data__.weight));}
		else if (xLabel===("acceleration")){return xScale(parseInt(this.__data__.acceleration));}
	})
	.attr("y", function(d,i) {
		if (yLabel==("horsepower")){return yScale(parseInt(this.__data__.horsepower));}
		else if (yLabel==("cylinder")){return yScale(parseInt(this.__data__.cylinders));}
		else if (yLabel==("mpg")){return yScale(parseInt(this.__data__.mpg));}
		else if (yLabel==("displacement")){return yScale(parseInt(this.__data__.displacement));}
		else if (yLabel==("weight")){return yScale(parseInt(this.__data__.weight));}
		else if (yLabel==("acceleration")){return yScale(parseInt(this.__data__.acceleration));}
	})
	var rect = svg.append("rect")
	.attr("x", 30)
	.attr("y", 30)
	.attr("height", 30)
	.style("fill", "black")
	.attr("width", 20);
})
.on("dblclick", function(d, i){
	var selected = d3.select("circle#"+this.__data__.car_name.replace(/ /g, "_")+this.__data__.displacement+this.__data__.model_year)
	.style("fill", d3.select(this).data.color);
	var text = d3.select(this)

	.transition()
	.attr("x", function(d,i) {
		console.log(this.__data__.oldX+">> "+this.__data__.oldY);
		return  this.__data__.oldX;
	})
	.attr("y", function(d,i) {
		return this.__data__.oldY;
	})

});

yLabelText = svg.append("text")
.attr("x", 10)
.attr("transform", "translate(-300, 400) rotate(270)")
.attr("y", 350)
.text(xLabel);
xLabelText = svg.append("text")
.attr("x", 500)
.attr("y", 850)
.text(yLabel);
bottomText = svg.append("text")
.attr("x", 20)
.attr("y", 880)
.text("Select Car From List");






////////////////////////////////////////////////////

 		//Create X axis
 		actualXAxis = svg.append("g")
 		.attr("class", "axis")
 		.attr("transform", "translate(70," + h  + ")")
 		.call(xAxis);

   				 //Create Y axis
   				 actualYAxis = 	actualXAxix =  svg.append("g")
   				 .attr("class", "axis")
   				 .attr("transform", "translate(90 ,0)")
   				 .call(yAxis);



   				});





</script>
</body>
</html>
