<html>
<head>

	<%= javascript_include_tag "d3.v3.min.js" %>
	<%= javascript_include_tag "jquery.min.js" %>
	<link rel="stylesheet" href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" />
	<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
	<script src="http://code.jquery.com/ui/1.10.2/jquery-ui.js"></script>
	<link rel="stylesheet" href="/resources/demos/style.css" />
	<style>
	.axis path,
	.axis line {
		fill: none;
		stroke: black;
		shape-rendering: crispEdges;
	}

	.axis text {
		font-family: sans-serif;
		font-size: 11px;
		}))
</style>
<script>


</script>
<style type="text/css">
div.inline { float:left; }
.clearBoth { clear:both; }
</style>
</head>
<body>
	<div class="row">
	<div class="well span12" style="height:50px; background-color:lightblue; max-width:1682" >
		<h2 class="inline">Car Attribute Visualisation - Owen Bannister </h2>

	</div>
</div>
	<div class="inline well" id="svg" >

	</div>

	<div class="inline well" style="background-color:lightblue">
		<button class="btn btn-primary"onclick="popHelp()">Help</button> 
		<!-- Sliders  -->
		<h2>Select ranges for the data</h2>
		Year Range:
		<input type="text" id="model_yearamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		<div id="model_yearslider-range" style="width:500px"></div>
		<br />
		Mpg range:
		<input type="text" id="mpgamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		<div id="mpgslider-range" style="width:500px"></div>
		<br />
		Cylinder range:
		<input type="text" id="cylinderamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		<div id="cylinderslider-range" style="width:500px"></div>
		<br />
		Horsepower range:
		<input type="text" id="horsepoweramount" style="border: 0; color: #f6931f; font-weight: bold;" />
		<div id="horsepowerslider-range" style="width:500px"></div>
		<br />
		Displacement range:
		<input type="text" id="displacementamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		<div id="displacementslider-range" style="width:500px"></div>
		<br />
		Weight range:
		<input type="text" id="weightamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		<div id="weightslider-range" style="width:500px"></div>
		<br />
		Acceleration range:
		<input type="text" id="accelerationamount" style="border: 0; color: #f6931f; font-weight: bold;" />
		<div id="accelerationslider-range" style="width:500px"></div>
	
		 
	
		<h2>Select attributes for axis</h2>
		<form>
			X
			<select id="xList" onchange="xDrop()">
				<option>mpg</option>
				<option>cylinder</option>  
				<option>horsepower</option>
				<option>displacement</option>
				<option>weight</option>
				<option>acceleration</option>
				<option>year</option>
			</select>

		</form>

		<form>
			Y
			<select id="yList" onchange="yDrop()">
				<option>mpg</option>
				<option>cylinder</option>  
				<option>horsepower</option>
				<option>displacement</option>
				<option>weight</option>
				<option>acceleration</option>
				<option>year</option>
			</select>

		</form>
	</div>
	
	<script type="text/javascript">

	function popHelp()
{
	alert("The size and colors of the circles in the graph relate to their MPG with green being high MPG and red being low\n\nUse the Sliders to change the cars displayed accoring to their ranges\n\nUse the dropdowns to change the axis of the graph\n\nUse the text at the bottom to select cars by name to display on the graph\n\nClick on a circle to see more information");
}

	var w = 1000;
	var h = 810;
	var textArea = 1200;
	var padding = 20;
	var count = 0;
	var counter = 0;
	var reset = false;
	var cars = [];

	var horsepower_min=46;
	var horsepower_max=230;
	var cylinder_min = 3;
	var cylinder_max = 8;
	var mpg_min = 9;
	var mpg_max = 46;
	var displacement_min = 68;
	var displacement_max = 455 ; 
	var acceleration_min = 8;
	var acceleration_max = 24;
	var weight_min = 1613;
	var weight_max = 5140;

	var model_year_max = 82;
	var model_year_min = 70;
	var svg;
	var xScale = d3.scale.linear()
	.domain([0, 1+(d3.max(cars, function(d) { return parseInt(d.mpg); }))])
	.range([20, w]);
	var yScale = d3.scale.linear()
	.domain([0, 1+(d3.max(cars, function(d) { return parseInt(d.mpg); }))])
	.range([h, 0]);
	var xLabel = "mpg";
	var yLabel = "mpg";
	var bottomText;
	var xAxis;
	var yAxis;
	var actualXAxis;
	var actualYAxis;
	var selected;
	var selectedBox;
	var selectedName
	var selectedYear
	var selectedMPG
	var selectedCylinders
	var selectedHorsepower
	var selectedDisplacement
	var selectedWeight
	var selectedAcceleration
	var close;
	var closeRect;
	var selectedTextBoxX;
	var selectedTextBoxY;

	function update()
	{

		d3.selectAll("circle").
		filter(function(d) {return (parseInt(d.cylinders) <= parseInt(cylinder_max) && parseInt(d.cylinders) >= parseInt(cylinder_min))&& (parseInt(d.horsepower) <= parseInt(horsepower_max) && parseInt(d.horsepower) >= parseInt(horsepower_min))&& (parseInt(d.mpg) <= parseInt(mpg_max) && parseInt(d.mpg) >= parseInt(mpg_min)) && (parseInt(d.displacement) <= parseInt(displacement_max) && parseInt(d.displacement) >= parseInt(displacement_min)) && (parseInt(d.weight) <= parseInt(weight_max) && parseInt(d.weight) >= parseInt(weight_min))&& (parseInt(d.acceleration) <= parseInt(acceleration_max) && parseInt(d.acceleration) >= parseInt(acceleration_min))&& (parseInt(d.model_year) <= parseInt(model_year_max) && parseInt(d.model_year) >= parseInt(model_year_min));})
		.transition()
		.attr("cx", function(d,i) {
			if (xLabel===("horsepower")){return xScale(parseInt(d.horsepower));}
			else if (xLabel===("cylinder")){return xScale(parseInt(d.cylinders));}
			else if (xLabel===("mpg")){return xScale(parseInt(d.mpg));}
			else if (xLabel===("displacement")){return xScale(parseInt(d.displacement));}
			else if (xLabel===("weight")){return xScale(parseInt(d.weight));}
			else if (xLabel===("acceleration")){return xScale(parseInt(d.acceleration));}
			else if (xLabel===("year")){return xScale(parseInt(d.model_year));}
		})
		.transition()		
		.duration(1000)
		.attr("opacity", 1);



		d3.selectAll("circle").filter(function(d) {
			return ((parseInt(d.cylinders) > parseInt(cylinder_max)) || (parseInt(d.cylinders) < parseInt(cylinder_min)))||((parseInt(d.horsepower) > parseInt(horsepower_max)) ||(parseInt(d.horsepower) < parseInt(horsepower_min)))||((parseInt(d.mpg) > parseInt(mpg_max)) ||(parseInt(d.mpg) < parseInt(mpg_min)))||((parseInt(d.displacement) > parseInt(displacement_max)) ||(parseInt(d.displacement) < parseInt(displacement_min)))||((parseInt(d.weight) > parseInt(weight_max)) ||(parseInt(d.weight) < parseInt(weight_min)))||((parseInt(d.acceleration) > parseInt(acceleration_max)) ||(parseInt(d.acceleration) < parseInt(acceleration_min)))||((parseInt(d.model_year) > parseInt(model_year_max)) ||(parseInt(d.model_year) < parseInt(model_year_min)));})
		.transition()
			.duration(1000)
		.attr("opacity", 0)
		.transition()
	
		.attr("cx", 3000);

	}
	function getX(d,i) {
	if (xLabel==("horsepower")){return xScale(parseInt(d.horsepower));}
	else if (xLabel==("cylinder")){return xScale(parseInt(d.cylinders));}
	else if (xLabel==("mpg")){return xScale(parseInt(d.mpg));}
	else if (xLabel==("displacement")){return xScale(parseInt(d.displacement));}
	else if (xLabel==("weight")){return xScale(parseInt(d.weight));}
	else if (xLabel==("acceleration")){return xScale(parseInt(d.acceleration));}
	else if (xLabel==("year")){return xScale(parseInt(d.model_year));}
}
function getY(d,i) {
	if (yLabel==("horsepower")){return yScale(parseInt(d.horsepower));}
	else if (yLabel==("cylinder")){return yScale(parseInt(d.cylinders));}
	else if (yLabel==("mpg")){return yScale(parseInt(d.mpg));}
	else if (yLabel==("displacement")){return yScale(parseInt(d.displacement));}
	else if (yLabel==("weight")){return yScale(parseInt(d.weight));}
	else if (yLabel==("acceleration")){return yScale(parseInt(d.acceleration));}
	else if (yLabel==("year")){return yScale(parseInt(d.model_year));}
}
function updateBox(d,i){
	if (selectedBox == null) {return null}
	selectedTextBoxX = getX(selected,i);
	 selectedTextBoxY = getY(selected,i);
selectedBox.transition().duration(1000)
	.attr("x", selectedTextBoxX)
	.attr("y", selectedTextBoxY);

	close.transition().duration(1000)
	.attr("x", selectedTextBoxX+245)
	.attr("y", selectedTextBoxY+15);


	closeRect
	.transition().duration(1000)
	.attr("x", selectedTextBoxX+240)
	.attr("y", selectedTextBoxY);

	selectedName.transition().duration(1000)
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+15);

	selectedYear.transition().duration(1000)
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+30);


	selectedMPG
	.transition().duration(1000)
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+45);
	

	selectedCylinders.transition().duration(1000)
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+60);


	selectedHorsepower.transition().duration(1000)
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+75);


	selectedAcceleration.transition().duration(1000)
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+90);
	

	selectedDisplacement.transition().duration(1000)
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+105);


	selectedWeight.transition().duration(1000)
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+120);

}
function getYMin(){
return parseInt((d3.min(cars, function(d) {
		if (yLabel==("horsepower")){return parseInt(d.horsepower);}
		else if (yLabel==("cylinder")){return parseInt(d.cylinders);}
		else if (yLabel==("mpg")){return parseInt(d.mpg);}
		else if (yLabel==("displacement")){return parseInt(d.displacement);}
		else if (yLabel==("weight")){return parseInt(d.weight);}
		else if (yLabel==("acceleration")){return parseInt(d.acceleration);}
		else if (yLabel===("year")){return parseInt(d.model_year);}

	}))*.9)

}
	function xDrop()
	{
		var xlist=document.getElementById("xList");
		xLabel = xlist.options[xlist.selectedIndex].text;
//Change the scales
xScale = d3.scale.linear()
.domain([0, 1+(d3.max(cars, function(d) {
	if (xLabel===("horsepower")){return parseInt(d.horsepower);}
	else if (xLabel===("cylinder")){return parseInt(d.cylinders);}
	else if (xLabel===("mpg")){return parseInt(d.mpg);}
	else if (xLabel===("displacement")){return parseInt(d.displacement);}
	else if (xLabel===("weight")){return parseInt(d.weight);}
	else if (xLabel===("acceleration")){return parseInt(d.acceleration);}
	else if (xLabel===("year")){return parseInt(d.model_year);}
}))])
.range([20, w]);

//Change the circles
svg.selectAll("circle")
.transition()
.duration(1000)
.attr("cx", function(d,i) {
	updateBox(d,i);
	if (xLabel===("horsepower")){return xScale(parseInt(d.horsepower))+70;}
	else if (xLabel===("cylinder")){return xScale(parseInt(d.cylinders))+70;}
	else if (xLabel===("mpg")){return xScale(parseInt(d.mpg))+70;}
	else if (xLabel===("displacement")){return xScale(parseInt(d.displacement))+70;}
	else if (xLabel===("weight")){return xScale(parseInt(d.weight))+70;}
	else if (xLabel===("acceleration")){return xScale(parseInt(d.acceleration))+70;}
	else if (xLabel===("year")){return xScale(parseInt(d.model_year))+70;}
})

xAxis = d3.svg.axis()
.scale(xScale)
.orient("bottom");
actualXAxis.call(xAxis);
xLabelText.text(xLabel);

}



function yDrop()
{
	var ylist=document.getElementById("yList");
	yLabel = ylist.options[ylist.selectedIndex].text;
	yScale = d3.scale.linear()
	.domain([getYMin(), 1+(d3.max(cars, function(d) {
		if (yLabel==("horsepower")){return parseInt(d.horsepower);}
		else if (yLabel==("cylinder")){return parseInt(d.cylinders);}
		else if (yLabel==("mpg")){return parseInt(d.mpg);}
		else if (yLabel==("displacement")){return parseInt(d.displacement);}
		else if (yLabel==("weight")){return parseInt(d.weight);}
		else if (yLabel==("acceleration")){return parseInt(d.acceleration);}
		else if (yLabel===("year")){return parseInt(d.model_year);}

	}))])
	.range([h, 0]);
	svg.selectAll("circle")	
	.transition()
	.duration(1000)
	.attr("cy", function(d,i) {
		updateBox(d,i);
		if (yLabel==("horsepower")){return yScale(parseInt(d.horsepower));}
		else if (yLabel==("cylinder")){return yScale(parseInt(d.cylinders));}
		else if (yLabel==("mpg")){return yScale(parseInt(d.mpg));}
		else if (yLabel==("displacement")){return yScale(parseInt(d.displacement));}
		else if (yLabel==("weight")){return yScale(parseInt(d.weight));}
		else if (yLabel==("acceleration")){return yScale(parseInt(d.acceleration));}
		else if (yLabel===("year")){return yScale(parseInt(d.model_year));}
	})
	yAxis = d3.svg.axis()
	.scale(yScale)
	.orient("left");


   				 //Create Y axis
   				 actualYAxis.call(yAxis);
   				 yLabelText.text(yLabel);
   				}



   				d3.csv("auto_mpg.csv", function(csv){
   					csv.map(function(d){
				//	var new_person = new person(d.mpg,d.cylinders,d.displacement,d.horsepower,d.weight,d.weight,d.acceleration,d.model_year,d.origin,d.car_name,);
				cars.push(d);
			});

   					svg = d3.select("#svg").append("svg")

   					var text_column_padding = 0;
   					svg.attr("width", w + 100)
   					.attr("height", h+textArea)
   					xScale = d3.scale.linear()
   					.domain([0, 1+(d3.max(cars, function(d) { return parseFloat(d.mpg); }))])
   					.range([20, w]);
   					yScale = d3.scale.linear()
   					.domain([0, 1+(d3.max(cars, function(d) { return parseFloat(d.mpg); }))])
   					.range([h, 0]);

   					xAxis = d3.svg.axis()
   					.scale(xScale)
   					.orient("bottom");

   					yAxis = d3.svg.axis()
   					.scale(yScale)
   					.orient("left");

////////////////////////////////////////////////////////////
//Slider
///////////////////////////////////////////////////////////




function killBox(d,i){	 
	selectedBox.remove();
	 selectedName.remove();
	 selectedYear.remove();
	 selectedMPG.remove();
	 selectedCylinders.remove();
	 selectedHorsepower.remove();
	 selectedDisplacement.remove();
	 selectedWeight.remove();
	 selectedAcceleration.remove();
	 close.remove();
	 closeRect.remove();
	}

function popBox(d,i){
if (selectedBox != null)	{killBox(d,i)}
	selected = d;
	 selectedTextBoxX = getX(d,i);
	 selectedTextBoxY = getY(d,i);
	 selectedBox = svg.append("rect")
	.attr("x", selectedTextBoxX)
	.attr("y", selectedTextBoxY)
	.attr("height", 140)
	.attr("width", 260)
	.style("fill", "lightblue")
	.attr("stroke", "black")
	.attr("stroke-width", function(d) {
		return 2;

	})
	.on("click", function(d, i){
		killBox(d,i);
	}).style("cursor", "pointer");

	closeRect = svg.append("rect")
	.attr("x", selectedTextBoxX+240)
	.attr("y", selectedTextBoxY)
	.attr("height", 20)
	.attr("width", 20)
	.style("fill", "red")
	.attr("stroke", "black")
	.attr("stroke-width", function(d) {
		return 1;
	}).on("click", function(d, i){
		killBox(d,i);
	}).style("cursor", "pointer");


	close = svg.append("text")
	.attr("x", selectedTextBoxX+245)
	.attr("y", selectedTextBoxY+15)
		.style("fill", "white")
	.text("X").on("click", function(d, i){
		killBox(d,i);
	}).style("cursor", "pointer");

	selectedName = svg.append("text")
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+15)
	.text("Name: "+d.car_name);

	selectedYear = svg.append("text")
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+30)
	.text("Year: "+d.model_year);

	selectedMPG = svg.append("text")
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+45)
	.text("MPG: "+d.mpg);

	selectedCylinders = svg.append("text")
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+60)
	.text("Horsepower: "+d.horsepower);

	selectedHorsepower = svg.append("text")
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+75)
	.text("Cylinders: "+d.cylinders);

	selectedAcceleration = svg.append("text")
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+90)
	.text("Acceleration (0-100kph): "+d.acceleration);

	selectedDisplacement = svg.append("text")
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+105)
	.text("Displacement (ml): "+d.displacement);

	selectedWeight = svg.append("text")
	.attr("x", selectedTextBoxX+5)
	.attr("y", selectedTextBoxY+120)
	.text("Weight (kg): "+d.weight);}





	$(function() {

		$( "#model_yearslider-range" ).slider({
			range: true,
			min: d3.min(cars, function(d) { return parseInt(d.model_year); }),
			max: d3.max(cars, function(d) { return parseInt(d.model_year); }),
			values: [ d3.min(cars, function(d) { return parseInt(d.model_year); }), d3.max(cars, function(d) { return parseInt(d.model_year); }) ],
			slide: function( event, ui ) {
				$( "#model_yearamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
				model_year_min = parseInt(ui.values[0]);
				model_year_max = parseInt(ui.values[1]);
			}
		});
				$( "#model_yearslider-range" ).slider({
  		change: function( event, ui ) {update();}
		});

		$( "#model_yearamount" ).val( "" + $( "#model_yearslider-range" ).slider( "values", 0 ) +
			" - " + $( "#model_yearslider-range" ).slider( "values", 1 ) );

		$( "#cylinderslider-range" ).slider({
			range: true,
			min: d3.min(cars, function(d) { return parseInt(d.cylinders); }),
			max: d3.max(cars, function(d) { return parseInt(d.cylinders); }),
			values: [ d3.min(cars, function(d) { return parseInt(d.cylinders); }), d3.max(cars, function(d) { return parseInt(d.cylinders); }) ],
			slide: function( event, ui ) {
				$( "#cylinderamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
				cylinder_min = parseInt(ui.values[0]);
				cylinder_max = parseInt(ui.values[1]);
			}
		});
				$( "#cylinderslider-range" ).slider({
  		change: function( event, ui ) {update();}
		});

		$( "#cylinderamount" ).val( "" + $( "#cylinderslider-range" ).slider( "values", 0 ) +
			" - " + $( "#cylinderslider-range" ).slider( "values", 1 ) );

		$( "#horsepowerslider-range" ).slider({
			range: true,
			min: d3.min(cars, function(d) { return parseInt(d.horsepower); }),
			max: d3.max(cars, function(d) { return parseInt(d.horsepower); }),
			values: [ d3.min(cars, function(d) { return parseInt(d.horsepower); }), d3.max(cars, function(d) { return parseInt(d.horsepower); }) ],
			slide: function( event, ui ) {
				$( "#horsepoweramount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
				horsepower_min = parseInt(ui.values[ 0 ]);
				horsepower_max = parseInt(ui.values[ 1 ]);
			}
		});
				$( "#horsepowerslider-range" ).slider({
  		change: function( event, ui ) {update();}
		});

		$( "#horsepoweramount" ).val( "" + $( "#horsepowerslider-range" ).slider( "values", 0 ) +
			" - " + $( "#horsepowerslider-range" ).slider( "values", 1 ) );

		$( "#mpgslider-range" ).slider({
			range: true,
			min: d3.min(cars, function(d) { return parseInt(d.mpg); }),
			max: d3.max(cars, function(d) { return parseInt(d.mpg); }),
			values: [ d3.min(cars, function(d) { return parseInt(d.mpg); }), d3.max(cars, function(d) { return parseInt(d.mpg); }) ],
			slide: function( event, ui ) {
				$( "#mpgamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
				mpg_min = parseInt(ui.values[ 0 ]);
				mpg_max = parseInt(ui.values[ 1 ]);
			}
		});
				$( "#mpgslider-range" ).slider({
  		change: function( event, ui ) {update();}
		});

		$( "#mpgamount" ).val( "" + $( "#mpgslider-range" ).slider( "values", 0 ) +
			" - " + $( "#mpgslider-range" ).slider( "values", 1 ) );

		$( "#displacementslider-range" ).slider({
			range: true,
			min: d3.min(cars, function(d) { return parseInt(d.displacement); }),
			max: d3.max(cars, function(d) { return parseInt(d.displacement); }),
			values: [ d3.min(cars, function(d) { return parseInt(d.displacement); }), d3.max(cars, function(d) { return parseInt(d.displacement); }) ],
			slide: function( event, ui ) {
				$( "#displacementamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
				displacement_min = parseInt(ui.values[ 0 ]);
				displacement_max = parseInt(ui.values[ 1 ]);
			}
		});
				$( "#displacementslider-range" ).slider({
  		change: function( event, ui ) {update();}
		});

		$( "#displacementamount" ).val( "" + $( "#displacementslider-range" ).slider( "values", 0 ) +
			" - " + $( "#displacementslider-range" ).slider( "values", 1 ) );	

		$( "#weightslider-range" ).slider({
			range: true,
			min: d3.min(cars, function(d) { return parseInt(d.weight); }),
			max: d3.max(cars, function(d) { return parseInt(d.weight); }),
			values: [ d3.min(cars, function(d) { return parseInt(d.weight); }), d3.max(cars, function(d) { return parseInt(d.weight); }) ],
			slide: function( event, ui ) {
				$( "#weightamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
				weight_min = parseInt(ui.values[ 0 ]);
				weight_max = parseInt(ui.values[ 1 ]);
			}
		});
		$( "#weightslider-range" ).slider({
  		change: function( event, ui ) {update();}
		});

		$( "#weightamount" ).val( "" + $( "#weightslider-range" ).slider( "values", 0 ) +
			" - " + $( "#weightslider-range" ).slider( "values", 1 ) );	

		$( "#accelerationslider-range" ).slider({
			range: true,
			min: d3.min(cars, function(d) { return parseInt(d.acceleration); }),
			max: d3.max(cars, function(d) { return parseInt(d.acceleration); }),
			values: [ d3.min(cars, function(d) { return parseInt(d.acceleration); }), d3.max(cars, function(d) { return parseInt(d.acceleration); }) ],
			slide: function( event, ui ) {
				$( "#accelerationamount" ).val( ui.values[ 0 ] + " - " + ui.values[ 1 ] );
				acceleration_min = parseInt(ui.values[ 0 ]);
				acceleration_max = parseInt(ui.values[ 1 ]);
			}
		});
				$( "#accelerationslider-range" ).slider({
  		change: function( event, ui ) {update();}
		});

		$( "#accelerationamount" ).val( "" + $( "#accelerationslider-range" ).slider( "values", 0 ) +
			" - " + $( "#accelerationslider-range" ).slider( "values", 1 ) );
	});
/////////////////////////////////////////////////////////////
// Helpers
/////////////////////////////////////////////////////////////
d3.selection.prototype.moveToFront = function() {
	return this.each(function(){
		this.parentNode.appendChild(this);
	});
};
d3.selection.prototype.backupXY = function() {
	if (this.attr("y")>900){
		this[0][0].__data__.oldY = this.attr("y");
		this[0][0].__data__.oldX = this.attr("x");
	}
	return this
};
d3.selection.prototype.saveColor = function() {
	if (this.attr("x")>w){
		this[0][0].__data__.color = this.attr("color");
	}
	return this
};
//////////////////////////////////////
/////////////////////////////////////////////////////////////
// Circles
/////////////////////////////////////////////////////////////
var circles = svg.selectAll("circle")
.data(cars)
.enter()
.append("circle")
.style("cursor", "pointer")
.attr("cx", function(d,i) {
	return getX(d,i)+70;
})
.attr("cy", function(d,i) {
	return getY(d,i)
})

.attr("r", function(d, i) {
	return parseFloat(d.mpg);
})
.attr("id", function(d, i) {
	return d.car_name.replace(/ /g, "_")+d.displacement+d.model_year;
})
.attr("stroke", "black")
.attr("stroke-width", "1")
.attr("fill", function(d,i) {
	var red = parseInt(255-d.mpg*6);
	var green = parseInt(d.mpg*6);
	var blue = 0;
	if (d.mpg<20){red+=parseInt(d.mpg*2);green-=parseInt(d.mpg*2)}
	return  "rgba(" + red + "," + green + "," + blue + "," +1.0 + ")"; 
})
.saveColor()
			//this.__data__
.on("mouseover", function(){
				//d3.select(this).style("fill", "red");
		})
			.on("mouseout", function(){
	
			})
.on("click", function(d, i){
	popBox(d,i);

});



/////////////////////////////////////////////////////////////
// Text
/////////////////////////////////////////////////////////////
svg.append("rect")
.attr("x", 0)
.attr("y", h+40)
.attr("fill", "lightblue")
.attr("width", w+100)
.attr("height", textArea+100);


svg.append("line")
.style("stroke", "black")
.attr("x1", 210)
    .attr("y1", h+100)
    .attr("x2", 210)
    .attr("y2", h+40+textArea);

svg.append("line")
.style("stroke", "black")
.attr("x1", 430)
    .attr("y1", h+100)
    .attr("x2", 430)
    .attr("y2", h+40+textArea);

svg.append("line")
.style("stroke", "black")
.attr("x1", 650)
    .attr("y1", h+100)
    .attr("x2", 650)
    .attr("y2", h+40+textArea);

svg.append("line")
.style("stroke", "black")
.attr("x1", 870)
    .attr("y1", h+100)
    .attr("x2", 870)
    .attr("y2", h+40+textArea);


var text = svg.selectAll("text")
.data(cars)
.enter()
.append("text")
.style("cursor", "pointer")
.sort(function(a,b){
	return d3.descending(b.car_name,a.car_name);
})
.text(function(d) {
	return d.car_name;
})

.attr("id", function(d, i) {
	return d.car_name.replace(/ /g, "_")+d.displacement+d.model_year;
})
.attr("fill", function(d,i) {
	var red = parseInt(255-d.mpg*6);
	var green = parseInt(d.mpg*6);
	var blue = 0;
	if (d.mpg<20){red+=parseInt(d.mpg*2);green-=parseInt(d.mpg*2)}
	return  "rgba(" + red + "," + green + "," + blue + "," +1.0 + ")"; 
})
.attr("x", function() {
	if (counter >80){
		counter=0;
		text_column_padding+=220;
	}
	counter += 1
	return text_column_padding;
})
.call(function(){counter = 0; count=0;})
.attr("y", function(d) {
	if (counter >80){
		count = 0;
		counter = 0;
	}	
	counter += 1
	return h+100+(count+=15);
})
.on("click", function(d, i){
	popBox(d,i)

})




yLabelText = svg.append("text")
.attr("x", 10)
.attr("transform", "translate(-300, 400) rotate(270)")
.attr("y", 350)
.text(xLabel);
xLabelText = svg.append("text")
.attr("x", 500)
.attr("y", 850)
.text(yLabel);
bottomText = svg.append("text")
.attr("x", 20)
.attr("y", 880)
.attr("font-size", "28")
.text("Select Car From List");






////////////////////////////////////////////////////

 		//Create X axis
 		actualXAxis = svg.append("g")
 		.attr("class", "axis")
 		.attr("transform", "translate(70," + h  + ")")
 		.call(xAxis);

   				 //Create Y axis
   				 actualYAxis  =  svg.append("g")
   				 .attr("class", "axis")
   				 .attr("transform", "translate(90 ,0)")
   				 .call(yAxis)
   				 .call( function(){popHelp();});



   				});





</script>
</body>
</html>
